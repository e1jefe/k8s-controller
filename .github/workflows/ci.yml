name: K8S-controller

on:
  push:
    branches: [ main, feature/* ]
    tags: [ 'v*' ]
    paths-ignore:
      - 'README.md'
  pull_request:
    branches: [ main, feature/* ]
    paths-ignore:
      - 'README.md'

env:
  GO_VERSION: '1.21'
  REGISTRY: ghcr.io
  IMAGE_NAME: e1jefe/k8s-controller

jobs:
  set_version:
    name: Set version
    runs-on: ubuntu-latest
    outputs:
      tagId: ${{ steps.version.outputs.tagId }}
    steps:
      - uses: actions/checkout@v4
      - name: Set version
        run: |
          VERSION=$(date +%y-%m-%d).$GITHUB_RUN_NUMBER
          echo "tagId=${VERSION}" >> $GITHUB_OUTPUT
          echo "tagId=${VERSION}"
        id: version

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [set_version]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  kubernetes-integration:
    name: Kubernetes Integration Test
    runs-on: ubuntu-latest
    needs: [test]
    timeout-minutes: 15
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Create kind cluster
      uses: helm/kind-action@v1
      with:
        cluster_name: test-cluster

    - name: Test cluster info
      run: kubectl cluster-info

    - name: Build application
      run: go build -o k8s-controller .

    - name: Test list deployments command
      run: |
        # Test the command works (should show 0 deployments)
        ./k8s-controller list deployments

    - name: Create test deployment
      run: |
        kubectl create deployment test-nginx --image=nginx --replicas=2
        kubectl wait --for=condition=available --timeout=300s deployment/test-nginx

    - name: Test list deployments with actual deployment
      run: |
        # Test with actual deployment
        ./k8s-controller list deployments | grep test-nginx

    - name: Clean up test deployment
      run: kubectl delete deployment test-nginx

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [kubernetes-integration, set_version]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Build binary
      run: |
        mkdir -p ./bin
        VERSION=${{ needs.set_version.outputs.tagId }}
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags "-X main.version=${VERSION}" -o ./bin/k8s-controller .

    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: k8s-controller-${{ needs.set_version.outputs.tagId }}
        path: bin/k8s-controller

  docker:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    needs: [build, set_version]
    if: github.event_name == 'push'
    timeout-minutes: 15
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ needs.set_version.outputs.tagId }}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Determine platforms
      id: platforms
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]] && [[ "${{ github.event_name }}" == "push" ]] && [[ "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" ]]; then
          echo "platforms=linux/amd64,linux/arm64" >> $GITHUB_OUTPUT
        else
          echo "platforms=linux/amd64" >> $GITHUB_OUTPUT
        fi

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: ${{ steps.platforms.outputs.platforms }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
        provenance: false
        sbom: false



 